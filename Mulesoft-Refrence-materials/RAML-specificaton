Design Principles of REST API:
	HTTP as a application protocol - HTTP methods like GET, POST, PATCH, PUT,.. and request n response with http status code
	Resource based - resource is like an object in OOP, entity in DB rather than action and are resources are represented by unique URIs.
	Representation - the representation of the resource can be in json, xml, text,... that is exchanged b/w the provider and consumer.
	uniform interface - specify the actions in terms of HTTP methods GET, POST, PATCH, PUT,.. and response
	stateless -  meaning that calls can be made independently of one another, and each call contains all of the data necessary to complete itself successfully.
	



RAML

title:
baseUri:
version:
mediaType:

steps:
	1:Define Resources
		Collection Resuorce
		Nested Resource
	2:Define Methods for Resources
	3:Define MediaType  
	4:Define QueryParameters

	5:Define Request(queryParams,headers,mediaType,body) and response(headers,mediaType,httpStatus code, body) in Methods
	6:Error Responses
	7:Define Request Headers(Accept Header& content-Type) and Response Header(loaction & content-Type)

	8:DataTypes (Facets- are some specail configuration/info like description,properties,default,.. and fragments - a portion of the API specfic that is created in a separate RAML file and then used in the root RAML file )
		Built-in DT(string, number, ..., object, array, union, json schema) and examples.
		Custom DT
		8.1	 Create Datatype fragments
		8.2  Create Example fragments
    
	9: Mocking Services - Helps to simulate the API

	10:Documentation Fragments(reference guide for API)- has exactly two key:value pairs i.e title and content

	11:DisplayName and description

	12:ResourceType- extract common patterns from resource definitions like methods, displayName, description, security schemas,..
		Reserved Parameters: resourcePath and resourcePathName
		example:
			/registartions
			<<resourcePathName>>  -> registrations
			<<resourcePathName | !uppercamelCase>>  -> Registrations
			<<resourcePathName | !uppercamelCase | !singularize>>  -> Registartion 	

	13:Traits(they can be used across methods)- extract patterns from HTTP methods like GET, POST, ...
		Method level node:
			description
			headers
			queryParams
			body
			response, etc
		Reserved Parametes and User Defined parameters
			resourcePath, resourcePathName and methodName
		Note: 'is:' node id used in the root file/resoucetype fragmets to refer traits and 'traits' node at the top of the root file.

	14:Library: collection of declarations like datatypes, resourcetypes, traits, ...
		Note: 'uses' keyword and 'libraryname.' is used to access the library in the rootfile.
	15:Security Schemas: Its helps u to protect ur APIs.
		<<securitySchemaNameofyourchoice>>:
			type:
			describedBy:
			settings:
	'securedBy' is the keyword to be included to secure ur API.
	Types: basicAUth, Oauth, customSecurity, ..
	16:Version - helps to publish different versions of the API.
		API version: v1, v2, ...
		when to change the API versions:
		1.when there is break/fail in API communication b/w the consumer and provider.
		2.when there is change in the representation of response/request.
		when not to change:
		1.adding a resouce/method/queryParams to the existing API that are optional.

		Asset version: (major,minor,patch) 1.0.0, 2.0.0, 2.1.0, ... 
		major: change when the API version changes.
		minor: change add a resource/method 
		patch: bug fix



#%RAML 1.0 DataType Fragment Identifier
type: Object
description: Error description
 properties:
	errorCode: 
	 type: integer
         min:400
	 max:599
	reasonPharse:
	details:


#%RAML 1.0 DataType --Fragment Identifier
type: Object
properties:
 addrssline?: string
 pin:string
 city:string
 state: string


Refernce API specification:
#%RAML 1.0
title: BookMyHotelAPI
baseUri: http://bookmyhotel.com
mediaType: 
- application/json


/registrations:
  get: 
    headers:
      Accept?:   
    responses:
      200: 
        headers:
         Content-Type: 
        body:
      404: 
        headers:
         Content-Type: 
        body:
  post:
    headers:
      Content-Type: 
    body:
    responses:
      201:
        headers:
          Location:
            example: http://bookmyhotel.com/registrations/r1     
      500:
        headers:
          Content-Type: 
        body:
  /{registrationId}:
    get:
      headers:
        Accept?:
      responses:
        200:
          headers:
            Content-Type: 
          body:
        404:
          headers:
            Content-Type: 
          body:
    patch:
      headers:
        Content-Type: 
      body:
      responses:
        204:
        500:
          headers:
            Content-Type: 
          body:
    delete:
      headers:
        Accept?: 
      responses:
        200:
          headers:
            Content-Type: 
          body:
        404:
          headers:
            Content-Type: 
          body:
/hotels:
  get:
    headers:
      Accept?: 
        example: application/json
    queryParameters:
      city:
        required: false
      state:
        required: false
      country:
        required: false
    responses:
      200:
        headers:
          Content-Type: 
        body:
      404:
        headers:
          Content-Type: 
        body:
  post:
    headers:
      Content-Type: 
    body:
    responses:
      201:
        headers:
          Location: 
            example: http://bookmyhotel.com/hotels/h1
      500:
        headers:
          Content-Type: 
        body:
  /{hotelId}:
    get:
      headers:
        Accept?:
      responses:
        200:
          headers:
            Content-Type: 
          body:   
        404:
          headers:
            Content-Type: 
          body: 
    patch:
      headers:
        Content-Type: 
      body:
      responses:
        204:
        500:
          headers:
            Content-Type: 
          body:
    delete:
      headers:
        Accept?:
      responses:
        200:
          headers:
            Content-Type: 
          body:
        404:
          headers:
            Content-Type: 
          body:
    /bookings:
      get:
        headers:
          Accept?:
        responses:
          200:
            headers:
              Content-Type: 
            body:
          404:
            headers:
              Content-Type: 
            body:
/bookings:
  get:
    headers:
      Accept?: 
    responses:
      200:
        headers:
          Content-Type: 
        body:
      404:
        headers:
          Content-Type: 
        body:
  post:
    headers:
      Content-Type: 
    body:
    responses:
      201:
        headers:
          Location:
            example: http://bookmyhotel.com/bookings/b1
      500:
        headers:
          Content-Type: 
        body:
  /{bookingId}:
    get:
      headers:
        Accept?: 
      responses:
        200:
          headers:
            Content-Type: 
          body:
        404:
          headers:
            Content-Type: 
          body:
    patch:
      body:
      responses:
        204:
        500:
          headers:
            Content-Type: 
          body:
    delete:
      headers:
        Accept?:
      responses:
        200:
          headers:
            Content-Type: 
          body:
        404:
          headers:
            Content-Type: 
          body:


